<?php
// $Id$


/**
 * Implements hook_install().
 */
function vsite_install() {
  $node_info = module_invoke_all('vsite_og_node_type_info');
  $group_bundles = array_keys($node_info, 'group');
  foreach ($group_bundles as $group_bundle) {
    // Adds the base vsite roles as OG roles
    $vsite_roles = array(
      OG_ANONYMOUS_ROLE,
      OG_AUTHENTICATED_ROLE,
      'administrator',
      'content editor',
    );

    foreach ($vsite_roles as $name) {
      $role = og_role_create($name, 'node', 0, $group_bundle);
      og_role_save($role);
    }

    $roles = og_roles($group_type = 'node', $group_bundle);
    $manager_roles = array();
    // Sets OG-specific roles.
    foreach ($roles as $rid => $role) {
      switch ($role) {
        case 'administrator':
          $manager_roles[] = $rid;
          $permissions = array(
            'view users outside groups',
            'update group',
            'unsubscribe',
            'manage group space',
            'approve and deny subscription',
            'administer group',
            'add user',
            'access administration pages',
          );
          og_role_grant_permissions($rid, $permissions);
          break;

        case 'member':
          $permissions = array(
            'view users outside groups',
            'unsubscribe',
          );
          og_role_grant_permissions($rid, $permissions);
          break;
      }
    }

    // Set default roles for group owners.
    variable_set("og_group_manager_default_rids_node_{$group_bundle}", $manager_roles);
  }

  og_create_field(OG_AUDIENCE_FIELD, 'user', 'user');
  // Add "Support expire" field to allow support team to auto-subscribe to
  // a group to a set interval.
  $og_field = og_fields_info(OG_AUDIENCE_FIELD);
  $og_field['instance']['label'] = 'Support expire';
  $og_field['field']['settings']['handler_settings']['membership_type'] = 'support_expire';
  og_create_field('vsite_support_expire', 'user', 'user', $og_field);

  // Sets the default OG preset to be os_personal
  variable_set('spaces_preset_og', 'os_scholar');

  _vsite_initilize_group_fields();
}

/**
 * Adds default group and group content fields to existing content.
 *
 * Only attaches to types provided by hook_vsite_og_node_type_info().
 */
function _vsite_initilize_group_fields() {

  $bundles = vsite_get_type_from_bundle();

  // Gets installed nodes.
  $info = entity_get_info('node');

  // Excludes nodes managed by this module.
  // These are the only nodes that will not require action.
  if (function_exists('vsite_node_info')) {
    $info['bundles'] = array_diff_key($info['bundles'], vsite_node_info());
  }

  foreach ($bundles as $bundle => $type) {
    // Skips if this bundle has not been created.
    if (!isset($info['bundles'][$bundle])) {
      continue;
    }

    if ($type == 'group') {
      vsite_attach_fields_to_group($bundle);
    }
    // Otherwise, treats this as "group content".
    else {
      vsite_attach_fields_to_group_content('node', $bundle);
    }
  }

  $info = entity_get_info('file');
  foreach ($info['bundles'] + array('undefined' => '') as $bundle => $type) {
    vsite_attach_fields_to_group_content('file', $bundle);
  }
}

/**
 * Enables field_group_overlay
 * Replace site info blocks with the new field_group block
 */
function vsite_update_7001(&$ctx) {
  module_enable('field_group_overlay');

  $nodes = db_select('node', 'n')->fields('n', array('nid'))->where('type', 'personal');

  foreach ($nodes as $r) {
    $override = db_select('spaces_override', 'so')
                ->fields('so', array('object_id', 'value'))
                ->where('id', $r->nid)
                ->where('object_type', 'context')
                ->where('object_id', '%reaction:block', 'LIKE')
                ->execute();
    foreach ($override as $over) {
      $blocks = unserialize($over->value);
      if (isset($blocks['boxes-site_info'])) {
        $delta = 'fg:node:'.$r->nid.':group_site_info';
        $blocks['vsite-'.$delta] = array(
          'module' => 'vsite',
          'delta' => $delta,
          'weight' => $blocks['boxes-site_info']['weight'],
          'region' => $blocks['boxes-site_info']['region'],
        );
      }
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function vsite_uninstall() {
  variable_del('vsite_support_expire');
}

/**
 * Enable the views_og_cache module
 */
function vsite_update_7002(&$ctx) {
  if (module_exists('views_og_cache')) {
    $output = t('views_og_cache is already enabled, nothing to do');
  }
  else if (!module_enable(array('views_og_cache'))) {
    throw new DrupalUpdateException('This version of OS requires views_og_cache, but it could not be enabled.');
  }
  else {
    $output = t('views_og_cache was enabled');
  }

  return $output;
}

/**
 * Set OG's permissions for group-members.
 */
function vsite_update_7003() {
  // Set permissions per group-type.
  $default_rid = array_search(OG_AUTHENTICATED_ROLE, og_get_default_roles());
  $default_permissions = og_get_default_permissions();
  $permissions = array_keys($default_permissions[$default_rid]);

  // Remove permissions to "edit any" or "delete any" content.
  foreach ($permissions as $key => $permission) {
    if (strpos($permission, 'update any') === 0 || strpos($permission, 'delete any') === 0) {
      unset($permissions[$key]);
    }
  }

  $group_types = og_get_all_group_bundle();
  foreach (array_keys($group_types['node']) as $bundle) {
    $rids = og_roles('node', $bundle);
    // Get the role ID of the group-member.
    $rid = array_search(OG_AUTHENTICATED_ROLE, $rids);
    og_role_grant_permissions($rid, $permissions);
  }
}

/**
 * Fixes taxonomy terms that were previously saved without purls in the alias.
 */
function vsite_update_7004() {
  // Selects all vsite nids and purls.
  $query = db_select('node', 'n');
  $query->join('purl', 'p', 'p.id = n.nid AND p.provider LIKE \'spaces_og\' ');
  $query->condition('type', array('personal', 'project', 'department'), 'IN');
  $query->fields('n', array('nid'));
  $query->fields('p', array('value'));
  $results = $query->execute();
  // For each site, prepends the purl to term paths without a purl already.
  foreach ($results as $result) {
    $purl = $result->value;
    $term_paths = _vsite_update_7004_term_paths_by_sid($result->nid);
    if (strlen($term_paths) === 0) {
      continue;
    }
    foreach ($term_paths as $term_path) {
      // First make sure we aren't going to cause a duplicate alias...
      $existing = db_select('url_alias', 'ua')
        ->fields('ua')
        ->condition('source', $term_path)
        ->condition('alias', "$purl/%", 'NOT LIKE')
        ->execute()
        ->fetchAllAssoc('pid');
      if ($existing) {
        $alias_orig = array_shift($existing);
        $alias_orig = $alias_orig->alias;
        $new_alias = "$purl/$alias_orig";
        $i = 0;
        // Increments the path until unique alias is found.
        while (_vsite_update_7004_duplicate($new_alias)) {
          if ($i) {
            $new_alias = substr($new_alias, 0, -1 * (strlen($i) + 1));
          }
          $new_alias = "$new_alias-$i";
          $i++;
        }
        // Updates the existing value.
        $query = "UPDATE {url_alias} "
          . "SET alias='" . $new_alias . "' WHERE source ='" . $term_path . "'";
        db_query($query);
      }
    }
  }
}

/**
 * Revert vsite logo fields
 */
function vsite_update_7005() {
  features_revert(array('vsite' => array('field')));
}

/**
 * Returns TRUE if the given alias already exists (note: aliases include purl).
 */
function _vsite_update_7004_duplicate($new_alias) {
  $result = db_select('url_alias', 'ua')
    ->fields('ua', array('pid'))
    ->condition('alias', $new_alias)
    ->execute()
    ->fetchAllAssoc('pid');
  return count($result);
}

/**
 * Returns an array of string term paths in a given vsite.
 */
function _vsite_update_7004_term_paths_by_sid($sid) {
  $term_paths = array();

  $vids = _vsite_update_7004_vids_by_sid($sid);
  if (empty($vids)) {
    return '';
  }

  $tids = _vsite_update_7004_tids_by_vid(array_keys($vids));
  foreach ($tids as $tid => $info) {
    $term_paths[] = "taxonomy/term/$tid";
  }

  return $term_paths;
}

/**
 * Returns the vocabulary IDs belonging to a vsite.
 */
function _vsite_update_7004_vids_by_sid($sid) {
  return db_select('og_vocab_relation', 'ogr')
    ->fields('ogr', array('vid'))
    ->condition('group_type','node')
    ->condition('gid', $sid)
    ->execute()
    ->fetchAllKeyed();
}

/**
 * Returns the terms that belong in a list of vocabularies.
 */
function _vsite_update_7004_tids_by_vid($vids) {
  if (is_int($vids)) {
    $vids = array($vids);
  }
  return db_select('taxonomy_term_data', 'ttd')
    ->fields('ttd', array('tid'))
    ->condition('vid', $vids, 'IN')
    ->execute()
    ->fetchAllKeyed();
}

/**
 * Creates newly exported term reference fields on vsite node types.
 */
function vsite_update_7006() {
  // Reverts the vsite module's newly exported vocabulary.
  // This garuntees that the "organization" vocabulary exists, and the new
  // Site URL field definition and instance on that vocabulary's terms.
  features_revert(array('vsite' => array('taxonomy')));
  features_revert(array('vsite' => array('field')));

  // Adds the new term reference field to each vsite node type. At the time of
  // this update, OpenScholar exports three vsite node types: personal, project,
  // and department.
  // @todo  update _vsite_initialize_group_fields() to do this.
  $group_types = array_keys(array_intersect(module_invoke_all('vsite_og_node_type_info'), array('group')));
  foreach ($group_types as $type) {
    vsite_attach_fields_to_group($type);
  }
}

/**
 * This is not currently used, disabling for now to remove REALM queries
 */
function vsite_update_7007(){

  if(module_exists('og_access')){
    module_disable(array('og_access'));
    if (module_exists('og_access')) {
      throw new DrupalUpdateException('Unable to disable og_access.');
    }
    else {
      $output = t('og_access was disabled');
    }
  }

  return $output;
}

/**
 * Enable the og_tasks module
 */
function vsite_update_7008(&$ctx) {
  if (module_exists('og_tasks')) {
    $output = t('og_tasks is already enabled, nothing to do');
  }
  else if (!module_enable(array('og_tasks'))) {
    throw new DrupalUpdateException('og_tasks could not be enabled.');
  }
  else {
    $output = t('og_tasks was enabled');
  }

  return $output;
}

/**
 * Adds new role 'content editor' to og roles.
 */
function vsite_update_7009() {
  $node_info = module_invoke_all('vsite_og_node_type_info');
  $group_bundles = array_keys($node_info, 'group');
  foreach ($group_bundles as $group_bundle) {

    // Adds the base vsite roles as OG roles
    $vsite_roles = array(
      'content editor',
    );

    foreach ($vsite_roles as $name) {
      $role = og_role_create($name, 'node', 0, $group_bundle);
      og_role_save($role);
    }

    $roles = og_roles($group_type = 'node', $bundle = $group_bundle);
    // Sets OG-specific roles
    foreach ($roles as $rid => $role) {
      switch ($role) {
        case 'content editor':
          og_role_grant_permissions($rid, array(
            'view users outside groups',
            'unsubscribe',
          ));
          break;
      }
    }
  }
}

/**
 * Adds all permissions that basic users have to the content editor role too.
 */
function vsite_update_7010() {
  $modules = array(
    'os',
    'os_comments',
    'os_wysiwyg',
  );

  if (module_exists('os_slideshow')) {
    $modules[] = 'os_slideshow';
  }

  $revert = array_fill_keys($modules, array('user_permission'));
  features_revert($revert);
}

/**
 * Enables module vsite_preset.
 */
function vsite_update_7011() {
  $module = 'vsite_preset';
  $replacements = array('@module' => $module);
  if (module_exists($module)) {
    $output = t('Module @module is already enabled, nothing to do', $replacements);
  }
  else if (!module_enable(array($module))) {
    throw new DrupalUpdateException('Module @module could not be enabled.', $replacements);
  }
  else {
    $output = t('Success: module @module was enabled', $replacements);
  }

  return $output;
}

/**
 * Enables the vsite preset module and makes new presets available.
 */
function vsite_update_7012() {
  // Enables the new module vsite_preset.
  module_enable(array('vsite_preset'));

  // Reverts the existing spaces in module os.
  features_revert(array('os' => array('spaces_presets')));

  // Sets the available presets variable (instead of reverting vsite strongarm).
  $value = array(
    'os_department' => 'os_department',
    'os_department_minimal' => 'os_department_minimal',
    'os_scholar' => 'os_scholar',
    'os_project' => 'os_project',
    'hwp_administrative' => 'hwp_administrative',
    'hwp_lab_research_group' => 'hwp_lab_research_group',
    'hwp_project' => 'hwp_project',
  );
  variable_set('os_enabled_spaces_presets', $value);
}

/**
 * Adds subsite_domains field to vsite node types and Add "Support expire" field to allow support team to auto-subscribe to VSite.
 */
function vsite_update_7013() {
  //subsite domains field
  features_revert(array('vsite' => array('field')));

  $group_types = array_keys(array_intersect(module_invoke_all('vsite_og_node_type_info'), array('group')));
  $group_types = array_intersect($group_types, variable_get('subsite_parents', array('department')));

  foreach ($group_types as $type) {
    vsite_attach_fields_to_group($type);
  }

  //og support field
  $og_field = og_fields_info(OG_AUDIENCE_FIELD);
  $og_field['instance']['label'] = 'Support expire';
  $og_field['field']['settings']['handler_settings']['membership_type'] = 'support_expire';
  og_create_field('vsite_support_expire', 'user', 'user', $og_field);
}

/**
 * Add "Override roles and permissions" functionality to VSites.
 */
function vsite_update_7014() {
  $group_types = array_keys(array_intersect(module_invoke_all('vsite_og_node_type_info'), array('group')));
  foreach ($group_types as $type) {
    vsite_attach_fields_to_group($type);
  }

  variable_set('og_node_access_strict', TRUE);

  // Delete the "vsite user" site-wide role.
  if ($role = user_role_load_by_name('vsite user')) {
    user_role_delete('vsite user');
  }

  // Remove the "vsite admin" site-wide role from users in case it was
  // accidentally assigned to them.
  $role_names = array(
    'content editor',
    'vsite admin',
    'vsite user',
  );
  $rids = array();
  foreach ($role_names  as $role_name) {
    $role = user_role_load_by_name($role_name);
    $rids[] = $role->rid;
  }

  db_delete('users_roles')
    ->condition('rid', $rids, 'IN')
    ->execute();

  features_revert(array('os' => array('user_role')));
  features_revert(array('os' => array('user_permission')));
  $features = array(
    'biocv',
    'book',
    'blog',
    'classes',
    'events',
    'faq',
    'image_gallery',
    'links',
    'news',
    'pages',
    'presentations',
    'profiles',
    'publications',
    'reader',
    'software',
  );

  foreach ($features as $feature) {
    features_revert(array('os_' . $feature => array('user_permission')));
  }

  // Set og permissions for VSite roles.
  $bundles = og_get_all_group_bundle();
  foreach (array_keys($bundles['node']) as $bundle) {
    vsite_set_og_permissions($bundle);
  }
}

/**
 * @todo: Rename roles.
 */
function vsite_update_7015() {
}
